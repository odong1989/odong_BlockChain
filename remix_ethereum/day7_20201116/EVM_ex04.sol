pragma solidity ^0.6.0;
contract C {
   uint256 a;
   uint256 b;
   uint256 c;
   uint256 d;               //선언장소 : 총 4개 
   function cc() public {
     a = 1;                 //part_a
     b = 2;                 //part_b
     c = 3;                 //part_c
     d= a*b*c;            //part_d
   }
}

/* 
//초기설정 
 주소값  : 00  01  02  03
스토리지 :(없음)
 메모리  :(없음) 
 stack   :(없음)

//part_a 
memory : 없음
st : 없음
----------------------------------
기계에 입력되는 값 : 60 01 60 00 81 90 55 50 
a의 연산-start
0x6001 //a의 값 01를 push            stack : 01
0x6000 //a의 주소  00 입력           stack : 01 00 
0x81   //스택에서 값을 2개 복사      stack : 01 00 01 
0x90   // 교환 및 2스택 더함         stack : 01 01 00 
0x55   // store에 0x01를 저장.       stack : 01 store(01,00) 
0x50   //pop하여 01이라는 값을 꺼냄.     
----------------------------------

//part_b
memory : 없음
st : 0x01
----------------------------------
기계에 입력되는 값 : 60 02 60 01 81 90 55 50 
a의 연산-start
0x6001 //a의 값 01를 push            stack : 01
0x6000 //a의 주소  00 입력           stack : 01 00 
0x81   //스택에서 값을 2개 복사      stack : 01 00 01 
0x90   // 교환 및 2스택 더함         stack : 01 01 00 
0x55   // store에 0x01를 저장.       stack : 01 store(01,00) 
0x50   //pop하여 01이라는 값을 꺼냄.     
----------------------------------

//part_c
memory : 없음
st : 0x01
----------------------------------
기계에 입력되는 값 : 60 03 60 02 81 90 55 50 
a의 연산-start
0x6001 //a의 값 01를 push            stack : 01
0x6000 //a의 주소  00 입력           stack : 01 00 
0x81   //스택에서 값을 2개 복사      stack : 01 00 01 
0x90   // 교환 및 2스택 더함         stack : 01 01 00 
0x55   // store에 0x01를 저장.       stack : 01 store(01,00) 
0x50   //pop하여 01이라는 값을 꺼냄.     
----------------------------------

//part_d
memory : 없음
st : 0x01
----------------------------------
기계에 입력되는 값 : 60 02 54 / 60 01 54 / 60 00 54 / 02 02 /81 90 50  
d의 연산-start
0x6002 //a의 값 01를 push            stack : 01
0x54   //스택에서 값을 2개 복사      stack : 01 00 01 

0x6001 //a의 값 01를 push            stack : 01
0x54   //스택에서 값을 2개 복사      stack : 01 00 01 


0x90   // 교환 및 2스택 더함         stack : 01 01 00 
0x55   // store에 0x01를 저장.       stack : 01 store(01,00) 
0x50   //pop하여 01이라는 값을 꺼냄.     

abc**를 스택에 넣는데 뭊무족무조건 왼쪽에 값부터 값을 로드하고, 연산자가 반복되는 경우에 따라 달라 질 수 있다.     
----------------------------------
*/
